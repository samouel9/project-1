# -*- coding: utf-8 -*-
"""Copy of Практика 0.3.0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YCVGai7EX_hS2lci86vHm5Uu1rfDpddL

ФИО
"""

print("хабиб самоуел")

"""**Во всей практике нельзя применять библиотеки предоставляющие готовые решения!**

# **Задача 1.**

Типы данных Напишите программу на Python, которая принимает список чисел в качестве входных данных от пользователя, а затем выводит сумму, среднее значение и максимальное значение из списка.

***Нельзя использовать: len(), min(), max(), average(), sum()***

Ввод:
```
1 2 3 4 5 6 7
```
Вывод:

```
Сумма чисел: 28
Среднее арифм.: 4.0
Максимальное значение: 7
```
"""

num=input ()
num=num.split()
count=0
sum=0
max=-1000000000000000
for i in num:
  count += 1
  sum = sum + int(num[count - 1])
  if int(num[count-1]) > max:
    max = int(num[count - 1])
print('сумма чисеол:', sum)
print('среднее арифим: ', sum /count)
print('максимальное значение:', max)

"""# **Задача 2.**

Напишите программу на Python, которая принимает список слов в качестве входных данных от пользователя, а затем распечатывает список в обратном порядке.

Ввод:

```
апельсин мандарин яблоко
```

Вывод:

```
яблоко мандарин апельсин
```
"""

name = input().split()
r_name = name[::-1]
print(r_name)

"""# **Задача 3**

Простой чат-бот
Создайте простого чат-бота, который отвечает на основные запросы пользователей. Программа должна использовать условные выражения для определения намерений пользователя и последующего соответствующего ответа.

Чат бот может:

- помогать складывать числа
- подсказывать фильм, музыку и тд (из заранее созданного списка)
- создавать список дел (а также выводить его, обновлять, очищать)

Интерфейс чат-бота на ваше усмотрение, это могут быть как заранее определенные команды, так и к примеру вызов команды по номеру

*Реализовать без использования функций*

Пример:

Ввод:

```
Олег, какую мызыку посоветуешь?
```

Вывод:

```
Я бы посоветовал вам: Led Zeppelin Stairway to Heaven
```
"""

import random
music = ["Led Zeppelin - Stairway to Heaven", "The Beatles - Hey Jude", "Queen - Bohemian Rhapsody"]
film = ["Inception", "The Matrix", "The Shawshank Redemption"]
missions= []

print("Привет! Я простой чат-бот. Чем могу помочь?")
print("1: Помогу сложить числа")
print("2: Посоветую фильм или музыку")
print("3: Управляю списком дел")
print("4: Введите 'выход', чтобы завершить разговор.")

while True:
    req = input("\nВаш запрос: ").lower()

    if req == "4" or "выход" in req:
        print("До встречи!")
        break

    elif req == "1" or "сложить числа" in req:
        try:
            num1 = float(input("Введите первое число: "))
            num2 = float(input("Введите второе число: "))
            print(f"Результат: {num1 + num2}")
        except ValueError:
            print("Пожалуйста, введите числа.")

    elif req == "2" or "посоветуй" in req:
        choice = input("Что вы хотите: музыку или фильм (1 or 2)? ").lower()
        if choice == "музыку" or "1" in choice:
            mus= random.choice(music)
            print(f"Я бы посоветовал вам: {mus}")
        elif choice == "фильм" or "2" in choice:
            fil = random.choice(film)
            print("Я рекомендую посмотреть: ", fil)
        else:
            print("Я не понял, что именно вы хотите.")

    elif req == "3" or "список дел" in req:
        print("Команды для списка дел:")
        print("Добавить: введите 'добавить' и задайте задачу.")
        print("Посмотреть: введите 'показать'.")
        print("Удалить: введите 'удалить' и укажите номер задачи.")
        print("Очистить: введите 'очистить'.")

        answer = input("Введите команду для списка дел: ").lower()
        if answer == "добавить" in answer:
            task = input("Введите задачу: ")
            missions.append(task)
            print("Задача добавлена!")
        elif answer == "показать" in answer:
            if missions:
                print("Ваш список дел:")
                for i, task in enumerate(missions, 1):
                    print(f"{i}. {task}")
            else:
                print("Ваш список дел пуст.")
        elif answer == "удалить" in answer:
            try:
                number = int(input("Введите номер задачи для удаления: "))
                удалённая_задача = missions.pop(number - 1)
                print(f"Задача '{удалённая_задача}' удалена!")
            except (IndexError, ValueError):
                print("Неверный номер задачи.")
        elif answer == "очистить" in answer:
            missions.clear()
            print("Список дел очищен!")
        else:
            print("Неизвестная команда.")

    else:
        print("Извините, я не понимаю ваш запрос. Попробуйте снова.")

"""# **Задача 4.**

Камень, ножницы, бумага

Создайте игру в Камень, ножницы, бумагу, в которой пользователь может играть против компьютера. Программа должна запросить выбор пользователя, а затем сгенерировать выбор компьютера. Затем программа должна определить победителя на основе правил игры.

**Этап 1:**

Определение победителя

**Этап 2:**
  
Игра до 3 побед


Ввод для "Этап 1":

```
Камень
```

Вывод:

```
Компьютер: Ножницы
Игрок: Камень
Победа: Игрок
```
"""

from random import randint
player = input('камень, ножницы, бумага: ').lower()
chosen = randint(1,3)
if chosen == 1:
    computer = 'камень'
elif chosen == 2:
    computer = ' бумага'
else:
    computer = 'ножницы'
print(player, "vs", computer)
if player == computer:
    print("DRAW!")
elif player == 'камень' and computer == ' бумага':
    print('Computer Win')
elif player ==  ' бумага' and computer == 'камень':
    print('Player Win')
elif player == 'ножницы' and computer == 'камень':
    print('Computer Win')
elif player == 'камень' and computer == 'ножницы':
    print('Player Win')
elif player == 'ножницы' and computer == ' бумага':
    print('Player Win')
elif player ==  ' бумага' and computer == 'ножницы':
    print('Computer Win')

"""# **Задача 5.**

Создайте игру "Палач" или "Виселица", в которой пользователь должен угадать слово, предлагая буквы. Программа должна выбрать случайное слово, а затем разрешить пользователю угадывать буквы. После каждого угадывания программа должна сообщать пользователю, есть ли в слове буква или нет.

**Этап 1**
Создать саму игру (игра должна иметь привлекательный интерфейс, соотвесвующий классической висилице)

**Этап 2:**
Ввести подсчет количества очков и ограничения на попытки

**Этап 3:** Добавить возможность сразу угадать слово
"""

import random
letters= ['open', 'run', 'kill', 'fly', 'close']
com = random.choice(letters)
got = ["_"] * len(com)
lives =6
print("_".join(got))

ascii = ['''
  +---+
  |   |
      |
      |
      |
      |
=========''', '''
  +---+
  |   |
  O   |
      |
      |
      |
=========''', '''
  +---+
  |   |
  O   |
  |   |
      |
      |
=========''', '''
  +---+
  |   |
  O   |
 /|   |
      |
      |
=========''', '''
  +---+
  |   |
  O   |
 /|\  |
      |
      |
=========''', '''
  +---+
  |   |
  O   |
 /|\  |
 /    |
      |
=========''', '''
  +---+
  |   |
  O   |
 /|\  |
 / \  |
      |
=========''']
print(ascii[0])
ll = []

while "_" in got and lives > 0:
  guess = input('type the letter to guess ').lower()

  if guess in ll:
    print('you ned to choice another ')
    print(f'you have {lives} more')
    continue
  ll.append(guess)

  if guess not in com :
    lives -= 1
    print(ascii[6-lives])

  for i in range(len(com)):
    if com[i] == guess:
      got[i] = guess
  print(got)
  print(f'you have {lives} more')


if lives == 0 :
  print('you lose =(')
else:
  print('you w')

"""# **Дополнительно: Задача 6 (для тех, кто не сделал в прошлый раз)**

**Цифра на определенном месте:**

Последовательно записан натуральный ряд чисел.

Какая цифра стоит в N позиции


Вввод:

```
Введите номер позиции: 1234567890
```

Вывод:

```
8
```
"""

def find_digit_at_position(n):
    length = 1
    count = 9
    start = 1
    while n > length * count:
        n -= length * count
        length += 1
        count *= 10
        start *= 10
    number = start + (n - 1) // length
    digit_index = (n - 1) % length
    return int(str(number)[digit_index])
n = int(input("Введите номер позиции: "))
result = find_digit_at_position(n)
print(f"Цифра на позиции  {result}")