# -*- coding: utf-8 -*-
"""Copy of Практика 0.4.0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/125lqYwtKXY_5SJdrjQ4VxhL7KIgEdj2l

Введите ваше ФИО:
"""

print('хабиб самоуел')

"""***Дисклеймер***

В данной практике запрещено использования функций:


*   sum()
*   min()
*   max()
*   average()
*   reversed()
*   sorted()
*   готовые функции или библиотеки

**Задача 1:**



Интернет-магазин предлагает следующие условия скидок:

*   Для заказов больше 1000 единиц, клиент получает скидку 5%. Если клиент использует промокод SUPERDISCOUNT, он получает скидку 10% (вместо 5%).
*  Для заказов более 5000 единиц, клиент получает скидку 15%, а использование промокода SUPERDISCOUNT увеличивает скидку до 20% (вместо 15%).

Этап 1:
Ввод:
```
Введите стоимость единицы товара: 5
Введите количество товара: 1001
Введите промокод: GiVEMEDISCONT
```

Вывод:

```
Ваша скидка: 5%
Итоговая сумма: 4754.75
```
Этап 2:

Оформите ваш код в виде функции
"""

cost=float(input('Введите стоимость единицы товара:'))
quantity= float(input('Введите количество товара:'))
promo_code= input('Введите промокод:')
total= cost*quantity
сумма = total*(5/100)

if promo_code==  'GiVEMEDISCONT':
  print('Ваша скидка:5%')
  print(f'Итоговая сумма {total-сумма}')
else:
    print(total)

"""**Задача 2:**

Этап 1:
Напишите программу способную отфильтровать список и вывести только положительные элементы


Ввод:
```
-1 5 1 2 -3
```

Вывод:

```
5 1 2
```

Этап 2:

Оформите ваш код в виде функции
"""

numbers = list(map(int,input('type the unmber:').split()))
num=''
for i in numbers:
  if i >= 0:
    num += str(i) + ' '

print(num)

"""**Задача 3:**

Этап 1:
Напишите программу реализующую Алгоритм Евклида


> Алгоритм Евклида – это алгоритм нахождения наибольшего общего делителя (НОД) пары целых чисел.

Чуть подробнее, если вы забыли: [link](https://skysmart.ru/articles/mathematic/naibolshij-obshchij-delitel)


Ввод:
```
30 18
```

Вывод:

```
6
```

Этап 2:
Оформите ваш код в виде функции

"""

num1 = int(input())
num2 = int(input())
a = num1
b = num2
while b != 0:
    a, b = b, a % b
print(a)

"""**Задача 4:**

Этап 1:
Напишите функцию программу, которая принимает строку и возвращает список слов и количество их упомнинаний в предложении

Этап 2:
Оформите ваш код в виде функции

Ввод:
```
apple banana apple
```

Вывод:

```
apple: 2,
banana: 1
```
"""

frots=input('')
words=frots.split()
num={}
for word in words:
  if word in num:
    num[word] += 1
  else:
    num[word] = 1
result = ', '.join(f'{word}: {count}' for word, count in num.items())
print(result)

"""**Задача 5:**

Этап 1:
Детектор анаграмм Напишите программу на Python, которая принимает в качестве входных данных две строки и проверяет, являются ли они анаграммами друг друга

Этап 2:
Оформите ваш код в виде функции

Ввод:
```
listen, silent
```

Вывод:

```
True
```
"""

str1 = input()
str2 = input()
str1 = str1.replace(" ", "").lower()
str2 = str2.replace(" ", "").lower()
result = sorted(str1) == sorted(str2)
print(result)

"""**Задача 6:**

Шифр ​​Цезаря

Напишите программу на Python, которая реализует шифр Цезаря, простой метод шифрования, который заменяет каждую букву буквой на фиксированное количество позиций вниз по алфавиту. Программа должна запрашивать у пользователя сообщение и значение сдвига, а затем шифровать и расшифровывать сообщение.
Подробнее о шифре Цезаря: [link](https://habr.com/ru/articles/534058/)

Этап 1:

Напишите код для реализации данной задачи

Этап 2:

Оформите код в виде нескольких функций:

* Зашифровывает сообщение
* Расшифровывает сообщение
"""

def encrypt(message, shift):
    encrypted_message = ""
    for char in message:
        if char.isalpha():
            shift_base = ord('A') if char.isupper() else ord('a')
            new_char = chr((ord(char) - shift_base + shift) % 26 + shift_base)
            encrypted_message += new_char
        else:
            encrypted_message += char
    return encrypted_message
def decrypt(encrypted_message, shift):
    decrypted_message = ""
    for char in encrypted_message:
        if char.isalpha():
            shift_base = ord('A') if char.isupper() else ord('a')
            new_char = chr((ord(char) - shift_base - shift) % 26 + shift_base)
            decrypted_message += new_char
        else:
            decrypted_message += char
    return decrypted_message
def main():
    message = input("Введите сообщение для шифрования: ")
    shift = int(input("Введите значение сдвига: "))

    encrypted_message = encrypt(message, shift)
    print(f"Зашифрованное сообщение: {encrypted_message}")

    decrypted_message = decrypt(encrypted_message, shift)
    print(f"Расшифрованное сообщение: {decrypted_message}")

main()

"""**Задача 7**

Задача: «Банковская система»

Создайте программу Python, которая имитирует базовую банковскую систему. Система должна иметь следующие функции:

Требования
*   Система должна позволять клиентам создавать счета и хранить их балансы.
*   Система должна позволять клиентам вносить и снимать деньги со своих счетов.
*   Система должна позволять клиентам проверять свой текущий баланс.
*   Система должна позволять клиентам переводить деньги между счетами.
*   Система должна отслеживать транзакции (депозиты, снятия и переводы) и иметь возможность печатать детали транзакций.


Задачи
1. Реализуйте банковскую систему, используя только базовые конструкции Python, такие как def, lists, if, elif и else, без классов или словарей.
Определите функции для создания счетов, внесения и снятия денег, получения балансов счетов, перевода денег между счетами, а также создания и печати транзакций.
2. Напишите основную функцию, которая демонстрирует использование банковской системы путем создания счетов, внесения и снятия денег и перевода денег между счетами.
3. Бонусное задание
Реализуйте способ хранения и печати истории транзакций для каждого счета.

Ограничения
Не используйте классы или словари.
Используйте только базовые конструкции Python, такие как def, lists, if, elif и else.

"""

accounts, transactions = [], []

def create_account(name, balance):
    accounts.append([name, balance])
    print(f"Account created for {name} with balance {balance}.")

def deposit(name, amount):
    for acc in accounts:
        if acc[0] == name:
            acc[1] += amount
            transactions.append(f"Deposited {amount} to {name}.")
            return print(f"{amount} deposited to {name}.")
    print(f"Account for {name} not found.")

def withdraw(name, amount):
    for acc in accounts:
        if acc[0] == name:
            if acc[1] >= amount:
                acc[1] -= amount
                transactions.append(f"Withdrew {amount} from {name}.")
                return print(f"{amount} withdrawn from {name}.")
            return print(f"Insufficient funds for {name}.")
    print(f"Account for {name} not found.")

def get_balance(name):
    for acc in accounts:
        if acc[0] == name:
            return print(f"{name}'s balance: {acc[1]}.")
    print(f"Account for {name} not found.")

def transfer(from_name, to_name, amount):
    from_acc, to_acc = None, None
    for acc in accounts:
        if acc[0] == from_name: from_acc = acc
        if acc[0] == to_name: to_acc = acc
    if from_acc and to_acc:
        if from_acc[1] >= amount:
            from_acc[1] -= amount
            to_acc[1] += amount
            transactions.append(f"Transferred {amount} from {from_name} to {to_name}.")
            return print(f"{amount} transferred from {from_name} to {to_name}.")
        print(f"Insufficient funds for {from_name}.")
    else:
        print(f"Account not found: {from_name if not from_acc else to_name}.")

def print_transactions():
    print("Transaction History:" + "\n".join(transactions) if transactions else "No transactions.")

while True:
    print("\nWelcome to the Banking System!")
    print("1. Create Account")
    print("2. Deposit Money")
    print("3. Withdraw Money")
    print("4. Check Balance")
    print("5. Transfer Money")
    print("6. Print Transactions")
    print("7. Exit")

    choice = input("Choose an option (1-7): ")

    if choice == '1':
        name = input("Enter account holder's name: ")
        balance = float(input("Enter initial balance: "))
        create_account(name, balance)
    elif choice == '2':
        name = input("Enter account holder's name: ")
        amount = float(input("Enter amount to deposit: "))
        deposit(name, amount)
    elif choice == '3':
        name = input("Enter account holder's name: ")
        amount = float(input("Enter amount to withdraw: "))
        withdraw(name, amount)
    elif choice == '4':
        name = input("Enter account holder's name: ")
        get_balance(name)
    elif choice == '5':
        from_name = input("Enter your name: ")
        to_name = input("Enter recipient's name: ")
        amount = float(input("Enter amount to transfer: "))
        transfer(from_name, to_name, amount)
    elif choice == '6':
        print_transactions()
    elif choice == '7':
        print("Thank you for using the Banking System!")
        break
    else:
        print("Invalid choice. Please try again.")